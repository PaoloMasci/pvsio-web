FCU: THEORY
 BEGIN

  PressureType: DATATYPE
    BEGIN
     inHg(p: real): inHg?
     hPA(p: real): hPA?
    END PressureType
  P2real(x: PressureType): real = p(x)
  CONVERSION P2real

  ModeType: TYPE = { STD, QNH }

  %-- machine states
  MachineState: TYPE = { hPA, InHg }

  %-- emuchart state
  State: TYPE = [#
    current_state: MachineState,
    previous_state: MachineState,
    pressure: PressureType,
    mode: ModeType
  #]

  %-- initial state
  init(x: real): State = (#
    current_state := InHg,
    previous_state := InHg,
    pressure := inHg(0),
    mode := QNH
  #)
  %-- utility functions
  enter_into(ms: MachineState)(st: State): State = st WITH [ current_state := ms ]
  leave_state(ms: MachineState)(st: State): State = st WITH [ previous_state := ms ]

  %-- transition functions
  per_click_pressure_switch(st: State): bool = ((current_state(st) = InHg)) OR ((current_state(st) = hPA)) AND mode(st) = QNH
  click_pressure_switch(st: (per_click_pressure_switch)): State =
    COND
    (current_state(st) = InHg AND mode(st) = QNH)
     -> LET new_st = leave_state(InHg)(st),
            new_st = new_st WITH [ pressure := hPA(pressure(st) * 33.48) ]
         IN enter_into(hPA)(new_st),
    (current_state(st) = hPA AND mode(st) = QNH)
     -> LET new_st = leave_state(hPA)(st),
            new_st = new_st WITH [ pressure := inHg(pressure(st) / 33.48) ]
         IN enter_into(InHg)(new_st),
    ELSE -> st
    ENDCOND

  per_click_mode_switch(st: State): bool = ((current_state(st) = InHg)) OR ((current_state(st) = hPA))
  click_mode_switch(st: (per_click_mode_switch)): State =
    COND
      mode(st) = STD -> st WITH [ mode := QNH ], 
      mode(st) = QNH -> st WITH [ mode := STD ]
    ENDCOND
  

  per_inc_InHg(st: State): bool = ((current_state(st) = InHg) AND (inHg(pressure(st)) > 22 AND inHg(pressure(st)) < 32.48)) AND mode(st) = QNH
  inc_InHg(st: (per_inc_InHg)): State =
    COND
    (current_state(st) = InHg) AND (inHg(pressure(st)) > 22 AND inHg(pressure(st)) < 32.48) AND mode(st) = QNH
     -> LET new_st = leave_state(InHg)(st),
            new_st = new_st WITH [ pressure := inHg(pressure(st) + 0.01) ]
         IN enter_into(InHg)(new_st),
    ELSE -> st
    ENDCOND

  per_dec_InHg(st: State): bool = ((current_state(st) = InHg) AND (inHg(pressure(st)) > 22 AND inHg(pressure(st)) < 32.48)) AND mode(st) = QNH
  inc_InHg(st: (per_dec_InHg)): State =
    COND
    (current_state(st) = InHg) AND (inHg(pressure(st)) > 22 AND inHg(pressure(st)) < 32.48) AND mode(st) = QNH
     -> LET new_st = leave_state(InHg)(st),
            new_st = new_st WITH [ pressure := inHg(pressure(st) - 0.01) ]
         IN enter_into(InHg)(new_st),
    ELSE -> st
    ENDCOND

  per_inc_hPA(st: State): bool = ((current_state(st) = hPA) AND (hPA(pressure(st)) > 745 AND hPA(pressure(st)) < 1100)) AND mode(st) = QNH
  inc_hPA(st: (per_inc_hPA)): State =
    COND
    (current_state(st) = hPA) AND (hPA(pressure(st)) > 745 AND hPA(pressure(st)) < 1100) AND mode(st) = QNH
     -> LET new_st = leave_state(hPA)(st),
            new_st = new_st WITH [ pressure := hPA(pressure(st) + 1) ]
         IN enter_into(hPA)(new_st),
    ELSE -> st
    ENDCOND

  per_dec_hPA(st: State): bool = ((current_state(st) = hPA) AND (hPA(pressure(st)) > 745 AND hPA(pressure(st)) < 1100)) AND mode(st) = QNH
  dec_hPA(st: (per_dec_hPA)): State =
    COND
    (current_state(st) = hPA) AND (hPA(pressure(st)) > 745 AND hPA(pressure(st)) < 1100) AND mode(st) = QNH
     -> LET new_st = leave_state(hPA)(st),
            new_st = new_st WITH [ pressure := hPA(pressure(st) - 1) ]
         IN enter_into(hPA)(new_st),
    ELSE -> st
    ENDCOND

  

 END FCU

% ---------------------------------------------------------------
%  PVS theory generated using PVSio-web PVSPrinter ver 0.2
%  Tool freely available at http://www.pvsioweb.org
% ---------------------------------------------------------------
