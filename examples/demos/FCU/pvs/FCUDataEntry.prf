(FCUDataEntry
 (STD_INHG_TCC1 0
  (STD_INHG_TCC1-1 nil 3679635193
   ("" (typepred "DOUBLE_MAX")
    (("" (typepred "FLOAT_MAX")
      (("" (typepred "ULONG_MAX")
        (("" (typepred "LONG_MAX")
          (("" (typepred "INT_MAX")
            (("" (typepred "SHRT_MAX") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil))
   nil))
 (STD_HPA_TCC1 0
  (STD_HPA_TCC1-1 nil 3679635193
   ("" (typepred "DOUBLE_MAX")
    (("" (typepred "FLOAT_MAX")
      (("" (typepred "ULONG_MAX")
        (("" (typepred "LONG_MAX")
          (("" (typepred "INT_MAX")
            (("" (typepred "SHRT_MAX") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil))
   nil))
 (init_data_entry_TCC1 0
  (init_data_entry_TCC1-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_data_entry_TCC2 0
  (init_data_entry_TCC2-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (STD_INHG const-decl "double" FCUDataEntry nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_data_entry_TCC3 0
  (init_data_entry_TCC3-1 nil 3679638246 ("" (subtype-tcc) nil nil)
   ((MAX_INTEGER_DIGITS const-decl "int" constants nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_data_entry_TCC4 0
  (init_data_entry_TCC4-1 nil 3679638246 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MIN_inHg const-decl "double" constants nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (MAX_inHg const-decl "double" constants nil)
    (STD_INHG const-decl "double" FCUDataEntry nil))
   nil))
 (dispmsg_TCC1 0
  (dispmsg_TCC1-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (messageID_TO_INT const-decl "int" constants nil)
    (N_MESSAGES const-decl "int" constants nil))
   nil))
 (dispmsg_TCC2 0
  (dispmsg_TCC2-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MIN_inHg const-decl "double" constants nil)
    (MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (messageID_TO_INT const-decl "int" constants nil)
    (N_MESSAGES const-decl "int" constants nil))
   nil))
 (dispmsg_TCC3 0
  (dispmsg_TCC3-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MAX_inHg const-decl "double" constants nil)
    (MIN_inHg const-decl "double" constants nil)
    (MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (messageID_TO_INT const-decl "int" constants nil)
    (N_MESSAGES const-decl "int" constants nil))
   nil))
 (dispmsg_TCC4 0
  (dispmsg_TCC4-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MIN_hPa const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_inHg const-decl "double" constants nil)
    (MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (messageID_TO_INT const-decl "int" constants nil)
    (N_MESSAGES const-decl "int" constants nil))
   nil))
 (dispmsg_TCC5 0
  (dispmsg_TCC5-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MAX_hPa const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_inHg const-decl "double" constants nil)
    (MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (messageID_TO_INT const-decl "int" constants nil)
    (N_MESSAGES const-decl "int" constants nil))
   nil))
 (click_digit_TCC1 0
  (click_digit_TCC1-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (double type-eq-decl nil limits nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (MAX_DECIMAL_DIGITS const-decl "int" constants nil))
   nil))
 (click_digit_TCC2 0
  (click_digit_TCC2-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (double type-eq-decl nil limits nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (MAX_INTEGER_DIGITS const-decl "int" constants nil))
   nil))
 (click_digit_TCC3 0
  (click_digit_TCC3-1 nil 3679635193
   ("" (skosimp*)
    (("" (typepred "decimalDigits(st1!1)")
      (("" (assert)
        (("" (expand "MAX_DECIMAL_DIGITS") (("" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((UnitsType type-decl nil FCUDataEntry nil)
    (MAX_INTEGER_DIGITS const-decl "int" constants nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (double type-eq-decl nil limits nil)
    (< const-decl "bool" reals nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (click_digit_TCC4 0
  (click_digit_TCC4-1 nil 3679635193
   ("" (skosimp*)
    (("" (split +)
      (("1" (typepred "dispval(st!1)")
        (("1" (expand "pow10")
          (("1" (expand "pow10") (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (lemma "DOUBLE_MAX_BIG")
        (("2" (typepred "decimalDigits(st!1)")
          (("2" (typepred "integerDigits(st!1)")
            (("2" (expand "MAX_INTEGER_DIGITS")
              (("2" (expand "MAX_DECIMAL_DIGITS")
                (("2" (expand "pow10")
                  (("2" (expand "pow10")
                    (("2" (expand "pow10")
                      (("2" (expand "pow10")
                        (("2" (typepred "DOUBLE_MAX")
                          (("2" (typepred "FLOAT_MAX")
                            (("2" (typepred "ULONG_MAX")
                              (("2"
                                (typepred "LONG_MAX")
                                (("2"
                                  (typepred "INT_MAX")
                                  (("2"
                                    (typepred "SHRT_MAX")
                                    (("2"
                                      (lemma "DOUBLE_MAX_BIG")
                                      (("2"
                                        (grind)
                                        (("1"
                                          (typepred "dispval(st!1)")
                                          (("1"
                                            (grind)
                                            (("1" (postpone) nil nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil)
                                         ("3" (postpone) nil nil)
                                         ("4" (postpone) nil nil)
                                         ("5" (postpone) nil nil)
                                         ("6" (postpone) nil nil)
                                         ("7" (postpone) nil nil)
                                         ("8" (postpone) nil nil)
                                         ("9" (postpone) nil nil)
                                         ("10" (postpone) nil nil)
                                         ("11" (postpone) nil nil)
                                         ("12" (postpone) nil nil)
                                         ("13" (postpone) nil nil)
                                         ("14" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (click_digit_TCC5 0
  (click_digit_TCC5-1 nil 3679637861 ("" (subtype-tcc) nil nil)
   ((MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (MAX_INTEGER_DIGITS const-decl "int" constants nil)
    (MAIN_DISPLAY_SIZE const-decl "int" constants nil))
   nil))
 (click_digit_TCC6 0
  (click_digit_TCC6-1 nil 3679638246
   ("" (skosimp*)
    (("" (split +)
      (("1" (hide -2)
        (("1" (case "pointEntered(st!1)")
          (("1" (assert)
            (("1" (typepred "decimalDigits(st!1)")
              (("1" (expand "MAX_DECIMAL_DIGITS")
                (("1" (expand "pow10")
                  (("1" (expand "pow10")
                    (("1" (expand "pow10") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (typepred "integerDigits(st!1)")
              (("2" (expand "MAX_INTEGER_DIGITS")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (hide -2)
          (("2" (case "pointEntered(st!1)")
            (("1" (assert)
              (("1" (typepred "decimalDigits(st!1)")
                (("1" (expand "MAX_DECIMAL_DIGITS")
                  (("1" (expand "pow10")
                    (("1" (expand "pow10")
                      (("1" (expand "pow10")
                        (("1" (typepred "DOUBLE_MAX")
                          (("1" (typepred "FLOAT_MAX")
                            (("1" (typepred "ULONG_MAX")
                              (("1"
                                (typepred "LONG_MAX")
                                (("1"
                                  (typepred "INT_MAX")
                                  (("1"
                                    (typepred "SHRT_MAX")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred "integerDigits(st!1)")
                (("2" (expand "MAX_INTEGER_DIGITS")
                  (("2" (typepred "DOUBLE_MAX")
                    (("2" (typepred "FLOAT_MAX")
                      (("2" (typepred "ULONG_MAX")
                        (("2" (typepred "LONG_MAX")
                          (("2" (typepred "INT_MAX")
                            (("2" (typepred "SHRT_MAX")
                              (("2"
                                (lemma "DOUBLE_MAX_BIG")
                                (("2"
                                  (case "integerDigits(st!1) < 4")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -13 2)
                                      (("1"
                                        (hide -13)
                                        (("1"
                                          (grind)
                                          (("1" (postpone) nil nil)
                                           ("2" (postpone) nil nil)
                                           ("3" (postpone) nil nil)
                                           ("4" (postpone) nil nil)
                                           ("5" (postpone) nil nil)
                                           ("6" (postpone) nil nil)
                                           ("7" (postpone) nil nil)
                                           ("8" (postpone) nil nil)
                                           ("9" (postpone) nil nil)
                                           ("10" (postpone) nil nil)
                                           ("11" (postpone) nil nil)
                                           ("12" (postpone) nil nil)
                                           ("13" (postpone) nil nil)
                                           ("14" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (postpone) nil nil) ("4" (postpone) nil nil))
      nil))
    nil)
   nil nil))
 (click_digit_TCC7 0
  (click_digit_TCC7-1 nil 3679638246 ("" (subtype-tcc) nil nil) nil
   nil))
 (validate_data_entry_TCC1 0
  (validate_data_entry_TCC1-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MIN_inHg const-decl "double" constants nil)) nil))
 (validate_data_entry_TCC2 0
  (validate_data_entry_TCC2-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MIN_inHg const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil))
   nil))
 (validate_data_entry_TCC3 0
  (validate_data_entry_TCC3-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MAX_inHg const-decl "double" constants nil)) nil))
 (validate_data_entry_TCC4 0
  (validate_data_entry_TCC4-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MAX_inHg const-decl "double" constants nil)
    (MIN_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil))
   nil))
 (validate_data_entry_TCC5 0
  (validate_data_entry_TCC5-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MIN_hPa const-decl "double" constants nil)) nil))
 (validate_data_entry_TCC6 0
  (validate_data_entry_TCC6-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MIN_hPa const-decl "double" constants nil)
    (MIN_inHg const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil))
   nil))
 (validate_data_entry_TCC7 0
  (validate_data_entry_TCC7-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MAX_hPa const-decl "double" constants nil)) nil))
 (validate_data_entry_TCC8 0
  (validate_data_entry_TCC8-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MAX_hPa const-decl "double" constants nil)
    (MIN_inHg const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil))
   nil))
 (validate_data_entry_TCC9 0
  (validate_data_entry_TCC9-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MAX_hPa const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_inHg const-decl "double" constants nil))
   nil))
 (validate_data_entry_TCC10 0
  (validate_data_entry_TCC10-1 nil 3679635193
   ("" (cond-disjoint-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MIN_inHg const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil))
   nil))
 (clear_data_entry_TCC1 0
  (clear_data_entry_TCC1-1 nil 3679635193 ("" (subtype-tcc) nil nil)
   ((MAX_DECIMAL_DIGITS const-decl "int" constants nil)) nil))
 (clear_data_entry_TCC2 0
  (clear_data_entry_TCC2-1 nil 3679642340
   ("" (skosimp*)
    (("" (assert)
      (("" (typepred "DOUBLE_MAX")
        (("" (typepred "FLOAT_MAX")
          (("" (typepred "ULONG_MAX")
            (("" (typepred "LONG_MAX")
              (("" (typepred "INT_MAX")
                (("" (typepred "SHRT_MAX") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil))
   nil))
 (clear_data_entry_TCC3 0
  (clear_data_entry_TCC3-1 nil 3679642340 ("" (subtype-tcc) nil nil)
   ((MAX_INTEGER_DIGITS const-decl "int" constants nil)) nil))
 (click_ESC_TCC1 0
  (click_ESC_TCC1-1 nil 3679635193
   ("" (skosimp*)
    (("" (typepred "programmedValue(st!1)")
      (("" (expand "MIN_inHg")
        (("" (expand "MAX_inHg")
          (("" (assert) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (MAX_hPa const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_inHg const-decl "double" constants nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (MAX_INTEGER_DIGITS const-decl "int" constants nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (double type-eq-decl nil limits nil)
    (< const-decl "bool" reals nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (string type-eq-decl nil strings nil)
    (MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (processKey_TCC1 0
  (processKey_TCC1-1 nil 3679635193 ("" (subtype-tcc) nil nil) nil
   nil))
 (processKey_TCC2 0
  (processKey_TCC2-1 nil 3679635193 ("" (cond-disjoint-tcc) nil nil)
   nil nil))
 (processEvent_TCC1 0
  (processEvent_TCC1-1 nil 3679635193 ("" (subtype-tcc) nil nil) nil
   nil)))
(constants
 (MAX_inHg_TCC1 0
  (MAX_inHg_TCC1-1 nil 3679632996
   ("" (grind)
    (("" (typepred "DOUBLE_MAX")
      (("" (typepred "FLOAT_MAX")
        (("" (typepred "ULONG_MAX")
          (("" (typepred "LONG_MAX")
            (("" (typepred "INT_MAX")
              (("" (typepred "SHRT_MAX") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (MIN_inHg_TCC1 0
  (MIN_inHg_TCC1-1 nil 3679632996
   ("" (grind)
    (("" (typepred "DOUBLE_MAX")
      (("" (typepred "FLOAT_MAX")
        (("" (typepred "ULONG_MAX")
          (("" (typepred "LONG_MAX")
            (("" (typepred "INT_MAX")
              (("" (typepred "SHRT_MAX") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (MAX_hPa_TCC1 0
  (MAX_hPa_TCC1-1 nil 3679632996
   ("" (grind)
    (("" (typepred "DOUBLE_MAX")
      (("" (typepred "FLOAT_MAX")
        (("" (typepred "ULONG_MAX")
          (("" (typepred "LONG_MAX")
            (("" (typepred "INT_MAX")
              (("" (typepred "SHRT_MAX") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (MIN_hPa_TCC1 0
  (MIN_hPa_TCC1-1 nil 3679632996
   ("" (grind)
    (("" (typepred "DOUBLE_MAX")
      (("" (typepred "FLOAT_MAX")
        (("" (typepred "ULONG_MAX")
          (("" (typepred "LONG_MAX")
            (("" (typepred "INT_MAX")
              (("" (typepred "SHRT_MAX") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (message_TCC1 0
  (message_TCC1-1 nil 3679632996 ("" (subtype-tcc) nil nil)
   ((N_MESSAGES const-decl "int" constants nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (message_TCC2 0
  (message_TCC2-1 nil 3679632996 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (MAIN_DISPLAY_SIZE const-decl "int" constants nil))
   nil))
 (message_TCC3 0
  (message_TCC3-1 nil 3679632996 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (MAIN_DISPLAY_SIZE const-decl "int" constants nil))
   nil))
 (message_TCC4 0
  (message_TCC4-1 nil 3679632996 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (MAIN_DISPLAY_SIZE const-decl "int" constants nil))
   nil))
 (message_TCC5 0
  (message_TCC5-1 nil 3679632996 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (MAIN_DISPLAY_SIZE const-decl "int" constants nil))
   nil))
 (message_TCC6 0
  (message_TCC6-1 nil 3679632996 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N_MESSAGES const-decl "int" constants nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (KEY_CODE_TO_INT_TCC1 0
  (KEY_CODE_TO_INT_TCC1-1 nil 3679632996
   ("" (cond-disjoint-tcc) nil nil) nil nil))
 (KEY_CODE_TO_INT_TCC2 0
  (KEY_CODE_TO_INT_TCC2-1 nil 3679632996
   ("" (cond-coverage-tcc) nil nil) nil nil))
 (EVT_CODE_TO_INT_TCC1 0
  (EVT_CODE_TO_INT_TCC1-1 nil 3679632996
   ("" (cond-coverage-tcc) nil nil) nil nil))
 (messageID_TO_INT_TCC1 0
  (messageID_TO_INT_TCC1-1 nil 3679632996
   ("" (cond-disjoint-tcc) nil nil) nil nil))
 (messageID_TO_INT_TCC2 0
  (messageID_TO_INT_TCC2-1 nil 3679632996
   ("" (cond-coverage-tcc) nil nil) nil nil))
 (FAILURE_CODES_TO_INT_TCC1 0
  (FAILURE_CODES_TO_INT_TCC1-1 nil 3679632996
   ("" (cond-disjoint-tcc) nil nil) nil nil))
 (FAILURE_CODES_TO_INT_TCC2 0
  (FAILURE_CODES_TO_INT_TCC2-1 nil 3679632996
   ("" (cond-coverage-tcc) nil nil) nil nil)))

